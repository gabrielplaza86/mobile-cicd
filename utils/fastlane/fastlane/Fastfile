# REQUIRED
require 'yaml'
require 'json'

opt_out_usage

# IOS -> DEFAULT PLATFORM
default_platform(:ios)

desc "Allows you to upload and distribute apps to your testers on App Center:
Parameters:
- api_token: appcenter token
- owner_name: appcenter account name of the owner of the app
- owner_type: organization
- app_name: appcenter app name (as seen in app URL)
- file: path to android build binary
- destinations: Comma separated list of distribution group names. Default is 'Collaborators', use '*' for all distribution groups"
lane :distribute_to_appcenter do |options|
  options[:api_token] = ENV['APPCENTER_API_KEY']
  options[:owner_name] = ENV['APPCENTER_OWNER_NAME']
  appcenter_upload(options)
  release = Actions.lane_context[SharedValues::APPCENTER_BUILD_INFORMATION]
  UI.message "
      BUILD_ID: #{release["id"]}, 
      BUILD_NUMBER: #{release["short_version"]},
      BUILD_VERSION: #{release["version"]}, 
      DOWNLOAD_LINK: #{Actions.lane_context[SharedValues::APPCENTER_DOWNLOAD_LINK]} üîó,
      RELEASE_LINK: https://appcenter.ms/orgs/#{options[:owner_name]}/apps/#{options[:app_name]}/distribute/releases/#{release["id"]} üîó"
  UI.success "Finish"
end

desc "Upload your app to Appetize.io to stream it in browser:
Parameters:
- path: Path to zipped build on the local filesystem. Either this or url must be specified
- api_token: Appetize.io API Token
- public_key: If not provided, a new app will be created. If provided, the existing build will be overwritten	
- api_host: Appetize API host
- platform: Platform. Either ios or android
- note: Notes you wish to add to the uploaded app"
lane :distribute_to_appetize do |options|
  options[:api_token] = ENV['APPETIZE_API_TOKEN']
  appetize(options)
  UI.success "Finish"
end

desc "Upload your app to Jfrog-Artifactory:
Parameters:
- pattern: Patter files to be uploaded to artifactory
- repo: Artifactory repo to put the file in
- repo_path: Path to deploy within the repo, including filename	
- api_host: Appetize API host
- platform: Platform. Either ios or android
- note: Notes you wish to add to the uploaded app"
lane :distribute_to_jfrog do |options|
  options[:endpoint] = ENV['JFROG_ENDPOINT']
  options[:username] = ENV['JFROG_USERNAME']
  options[:password] = ENV['JFROG_PASSWORD']
  
  pattern = options[:pattern]
  options.delete(:pattern)
  Dir[pattern].each do |file|
    options[:file] = file
    artifactory(options)
    UI.message "
      FILE: #{file} üìÅ,
      DOWNLOAD_LINK: #{Actions.lane_context[SharedValues::ARTIFACTORY_DOWNLOAD_URL]} üîó,
      DOWNLOAD_SIZE: #{Actions.lane_context[SharedValues::ARTIFACTORY_DOWNLOAD_SIZE]} üèãÔ∏è\n\n"
  end
end

# GENERIC FUNCTIONS IOS
platform :ios do

end

# GENERIC FUNCTIONS ANDROID
platform :android do

  desc "uploads app metadata, screenshots, binaries, and app bundles to Google Play:
  Parameters:
  - application_id: package name of the application to use
  - json_key: path to a file containing service account JSON, used to authenticate with Google
  - path: Path to zipped build on the local filesystem. Either this or url must be specified
  - track_deploy: The track of the application to use"
  lane :distribute_to_playstore do |options|
    rename_to = {
                  application_id: "package_name",
                  track_deploy: "track",
                }
    extname = File.extname(options[:path]).delete(".")
    rename_to.each do |old_key,new_key|
      options[new_key.to_sym] = options.delete old_key
    end
    options[extname.to_sym] = options.delete :path
    options[:skip_upload_metadata] = options[:metadata_path].to_s.empty?
    supply(options)
    UI.success "Finish"
  end


  desc "Huawei App Gallery Connect Info:
  Parameters:
  - client_id: Client id (project=N/A)
  - client_secret: Client Secret key # pragma: allowlist secret
  - app_id: App identification"
  lane :get_app_info do |options|
    huawei_appgallery_connect_get_app_info(
      client_id: options[:client_id],
      client_secret: options[:client_secret],
      app_id: options[:app_id],
    )
    UI.success "Finish"
  end

  desc "Huawei App Gallery Connect Upload:
  Parameters:
  - client_id: Client id (project=N/A)
  - client_secret: Client Secret key # pragma: allowlist secret
  - app_id: App identification
  - apk_path: Path Apk'
  - submit_for_review: False by default"
  lane :distribute_to_huawei do |options|
    # Optionals
    options[:submit_for_review] = options[:submit_for_review].to_s.downcase == 'true' ? true : false
    # options[:metadata_path] = options[:metadata_path] || 'fastlane/metadata/huawei'

    huawei_appgallery_connect(
      client_id: ENV['HUAWEI_CLIENT_ID_DEPLOY'],
      client_secret: ENV['HUAWEI_CLIENT_SECRET_DEPLOY'],
      app_id: options[:app_id],
      apk_path: Dir["#{options[:apk_path]}"].first,

      # Optional, Parameter beyond this are optional
      is_aab: File.extname(options[:apk_path]).eql?(".aab"),
      submit_for_review: options[:submit_for_review],
      # metadata_path: options[:metadata_path]
    )
    UI.success "Finish upload."
  end
end
